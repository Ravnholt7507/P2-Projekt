<!DOCTYPE html>
<html lang="en">
<title>Pandemic program</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.2.1/dist/chart.min.js"> </script>
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://www.w3schools.com/lib/w3-theme-black.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
html,body,h1,h2,h3,h4,h5,h6 {font-family: "Roboto", sans-serif;}
.w3-sidebar {
  z-index: 3;
  width: 250px;
  top: 0px;
  bottom: 0;
  height: inherit;
}
</style>
<body>

<!-- Sidebar for navigating the subpages -->
<nav class="w3-sidebar w3-bar-block w3-collapse w3-large w3-theme-l5 w3-animate-left" id="mySidebar">
  <a href="javascript:void(0)" onclick="w3_close()" class="w3-right w3-xlarge w3-padding-large w3-hover-black w3-hide-large" title="Close Menu">
    <i class="fa fa-remove"></i>
  </a>
  <h4 class="w3-bar-item"><b onclick="frontpage()">Menu</b></h4>
  <a class="w3-bar-item w3-button w3-hover-black" href="#" onclick="Admit_Patient()">Admit Patients</a>
  <a class="w3-bar-item w3-button w3-hover-black" href="#" onclick="Unadmit_Patient()">Unadmit Patients</a>
  <a class="w3-bar-item w3-button w3-hover-black" href="#" onclick="Status_Regions()">Status of Regions</a>
  <a class="w3-bar-item w3-button w3-hover-black" href="#" onclick="Instructions()">Instructions</a>
  <a class="w3-bar-item w3-button w3-hover-black" href="#" onclick="Contact()">Contact</a>
</nav>

<!-- Overlay effect when opening sidebar on small screens -->
<div class="w3-overlay w3-hide-large" onclick="w3_close()" style="cursor:pointer" title="close side menu" id="myOverlay"></div>

<!-- Main content: shift it to the right by 250 pixels when the sidebar is visible -->
<div class="w3-main" style="margin-left:250px">

  <div class="w3-row w3-padding-64">
    <div class="w3-twothird w3-container" id="frontpage">

      <!-- Front page text. Changes when user navigates to subpages -->
        <h1 class="w3-text-teal" id="h1">Hospital Management</h1>
        <p id = "sub_text"> Manage Patients.</p>
        
        <!-- Form for submitting patients. Includes field for Patient name, drop down selection menu for grade, 
        and search with autocomplete for patient city. Will only be visible when user navigates to the subpage "admit patients" -->
        <form class="Patientinput" action="/" id="pInput" type="hidden">
          <label for="fname">Patient name:</label><br>
          <input type="text" id="pname" name="name" value="" required><br>
          <label for="Grading">Grading:</label><br>
          <select id="grading" name="grading">
            <option value="-">-</option>
            <option value=0>0</option>
            <option value=1>1</option>
            <option value=2>2</option>
            <option value=3>3</option>
          </select><br>
          <label for="City">City:</label><br>
          <input type="text" list="cities" id="city" name="City" required>
          <datalist id="cities">
            <option value="Brønderslev">
            <option value="Frederikshavn">
            <option value="Hjørring">
            <option value="Jammerbugt">
            <option value="Læsø">
            <option value="Mariagerfjord">
            <option value="Morsø">
            <option value="Rebild">
            <option value="Thisted">
            <option value="Vesthimmerland">
            <option value="Aalborg">
            <option value="Favrskov">
            <option value="Hedensted">
            <option value="Herning">
            <option value="Holstebro">
            <option value="Horsens">
            <option value="Ikast">
            <option value="Lemvig">
            <option value="Norddjurs">
            <option value="Odder">
            <option value="Randers">
            <option value="Ringkøbing-Skjern">
            <option value="Samsø">
            <option value="Silkeborg">
            <option value="Skanderborg">
            <option value="Skive">
            <option value="Struer">
            <option value="Syddjurs">
            <option value="Viborg">
            <option value="Aarhus">
            <option value="Assens">
            <option value="Billund">
            <option value="Esbjerg">
            <option value="Fanø">
            <option value="Fredericia">
            <option value="Faaborg-Midtfyn">
            <option value="Haderslev">
            <option value="Kerteminde">
            <option value="Kolding">
            <option value="Langeland">
            <option value="Middelfart">
            <option value="Nordfyns">
            <option value="Nyborg">
            <option value="Odense">
            <option value="Svendborg">
            <option value="Sønderborg">
            <option value="Tønder">
            <option value="Varde">
            <option value="Vejen">
            <option value="Vejle">
            <option value="Ærø">
            <option value="Aabenraa">
            <option value="Faxe">
            <option value="Greve">
            <option value="Guldborgsund">
            <option value="Holbæk">
            <option value="Kalundborg">
            <option value="Køge">
            <option value="Lejre">
            <option value="Lolland">
            <option value="Næstved">
            <option value="Odsherred">
            <option value="Ringsted">
            <option value="Roskilde">
            <option value="Slagelse">
            <option value="Solrød">
            <option value="Sorø">
            <option value="Stevns">
            <option value="Vordingborg">
            <option value="Albertslund">
            <option value="Allerød">
            <option value="Ballerup">
            <option value="Bornholm">
            <option value="Brøndby">
            <option value="København">
            <option value="Dragør">
            <option value="Egedal">
            <option value="Fredensborg">
            <option value="Frederiksberg">
            <option value="Frederikssund">
            <option value="Furesø">
            <option value="Gentofte">
            <option value="Gladsaxe">
            <option value="Glostrup">
            <option value="Gribskov">
            <option value="Halsnæs">
            <option value="Helsingør">
            <option value="Herlev">
            <option value="Hillerød">
            <option value="Hvidovre">
            <option value="Høje-Taastrup">
            <option value="Hørsholm">
            <option value="Ishøj">
            <option value="Lyngby-Taarbæk">
            <option value="Rudersdal">
            <option value="Rødovre">
            <option value="Tårnby">
            <option value="Vallensbæk">
          </datalist><br><br>
          <input type="submit" value="Admit">
        </form>
        <br>

        <!-- Form for searching for patients with the intent to unadmit them. This form will only appear 
        when the user navigates to the unadmit subpage. Using JavaScript code, a request is sent to the server which reponds with
        a complete list of all admitted patients, which gets put into a datalist that the user will be able to search and select from. -->
        <div id="unadmit">
          <form>
            <label for="search">Search</label>
            <input type="text" id="Search" list="patients" size="40">
            <button type="submit">Unadmit</button>
          </form>
        </div><br>

        <!-- Field where the result of submitting a patient will appear -->
        <div id="submitResult">
          
        </div>

        <!--  Field where data about other patients who might need to be moved as a result of submitting a patient will appear -->
        <br>
        <div id="otherPatients">

        </div>
        <br>
        
        <!-- Section where user can see which solver is currently in use, while having the ability to switch between them. 
        Only visible on the admit patients subpage. -->
        <div id="solve">
          <p>Select which type of solver the system is using. Using solver 2 means patients can be moved more than once. If solver 1 is used, patients can only be moved between hospitals once.</p>
          <p><b id="solver"> </b></p> <a href="#" onclick="solverChange()">Change</a>
        </div>

        <!-- Section where statistics about how many bed spaces and equipment are being used in each region will appear. 
        Only visible when user navigates to the statistics subpage. -->
        <div id="statistics">
        </div>
        <br>

        <!-- Section where a visual diagram about the statistics will appear. 
        Only visible on the statistics subpage -->
        <div id="canvasElement">
        </div>

</div>

<script>
// Get the Sidebar
var mySidebar = document.getElementById("mySidebar");
// Get the DIV with overlay effect
var overlayBg = document.getElementById("myOverlay");
// Toggle between showing and hiding the sidebar, and add overlay effect
function w3_open() {
  if (mySidebar.style.display === 'block') {
    mySidebar.style.display = 'none';
    overlayBg.style.display = "none";
  } else {
    mySidebar.style.display = 'block';
    overlayBg.style.display = "block";
  }
}
// Close the sidebar with the close button
function w3_close() {
  mySidebar.style.display = "none";
  overlayBg.style.display = "none";
}

// Getting the different sections in the page, such that whether they are visible or not can be controlled using JS
// Get form for admitting patients
let pInput = document.getElementById("pInput");
pInput.style.display = "none";
// Get section about which solver is being used
let solve = document.getElementById("solve");
solve.style.display = "none";
// Get field for statistics
let statistics = document.getElementById("statistics");
statistics.style.display = "none";
// Get Section where the result of admitting patients will appear
let submitResults = document.getElementById("submitResult");
let otherPatients = document.getElementById("otherPatients");
otherPatients.style.display = "none";
// Get form for unadmitting patients
let unadmit = document.getElementById("unadmit");
unadmit.style.display = "none";
// Get field where the canvas will appear
let canvasElement = document.getElementById("canvasElement");
canvasElement.style.display = "none";


// Function that controls what is visible when user navigates to front page
function frontpage() {
  document.getElementById("h1").innerHTML = "Hospital Management";
  document.getElementById("sub_text").innerHTML = "Manage Patients."; 
  pInput.style.display = "none";
  solve.style.display = "none";
  statistics.style.display = "none";
  canvasElement.style.display = "none"; 
  submitResults.innerHTML = "";
  unadmit.style.display = "none";
  otherPatients.style.display = "none";
}

// Function that controls what is visible when user navigates to admit patients subpage
function Admit_Patient() {
  document.getElementById("h1").innerHTML = "Admit Patients";
  document.getElementById("sub_text").innerHTML = "Here you can admit patients. Please fill out the input fields below to admit a patient:";
  pInput.style.display = "block";
  solve.style.display = "block";
  canvasElement.style.display = "none"; 
  statistics.style.display = "none";
  otherPatients.style.display = "block";
  submitResults.innerHTML = "";
  unadmit.style.display = "none";
  // Call the function solverChecker to receive data from the server about which solver is used
  solverChecker();
}

// Function that controls what is visible when user navigates to unadmit patients subpage
function Unadmit_Patient() {
  document.getElementById("h1").innerHTML = "Unadmit Patients";
  document.getElementById("sub_text").innerHTML = "Here patients can be unadmitted. Type in a name to search for a patient: ";
  pInput.style.display = "none";
  solve.style.display = "none";
  statistics.style.display = "none";
  canvasElement.style.display = "none"; 
  otherPatients.style.display = "none"
  submitResults.innerHTML = "";
  unadmit.style.display = "block";
  // Check if a datalist of all patients has been created already
  // If it the case, the list gets deleted, as it is likely outdated
  try {
    document.getElementById('patients').remove();
  } catch {
    console.log("Its fine");
  }
  // Get new updated patientslist from server
  getPatientlist();
}

// Function that sents request to server and gets the list of all admitted patients to be used in unadmit subpage
async function getPatientlist() {
  const options = {
      method: 'POST',
      headers: {"content-type": "application/json"},
      body: JSON.stringify()
  };
  // Save server respons
  const response = await fetch("/patients", options);
  // Get list of patients in JSON format
  const jsonData = await response.json();
  console.log(jsonData); //test
  console.log(jsonData.length); //test
  // Create a new datalist
  patientslist = document.createElement('datalist');
  patientslist.id = 'patients';
  // Create an option in the datalist for each patient. The value of the option contains the info about the patient
  // The ID of the option corresponds to the patients' ID
  for (index in jsonData) {
    var option = document.createElement('option');
    option.value = jsonData[index].Name + ' grade: ' + jsonData[index].grading + ' region: ' + jsonData[index].region + ' ID: ' + jsonData[index].PID;
    option.id = jsonData[index].PID;
    patientslist.appendChild(option);
  }
  unadmit.appendChild(patientslist);
}

// Function that gets called once the user taps the unadmit botton. 
// It finds the patient from the list to be unsubmitted. Send data to server for unsubmission. 
unadmit.addEventListener("submit", async (e) => {
  e.preventDefault();
  // Get user input
  let patient = document.getElementById("Search");
  // Search for an option with same value, to check if the patient actually exists.
  let doesPatientExist = document.querySelector('option[value="' + patient.value + '"]');
  if (doesPatientExist == null) {
    alert("Please select a patient from the list");
    return;
  }
  // Get the ID of the option
  let unsubmitData = {index: doesPatientExist.id}
  const options = {
    method: 'POST',
    headers: {"content-type": "application/json"},
    body: JSON.stringify(unsubmitData)
  };
  // Send data to server
  const response = await fetch("/unadmit", options);
  const jsonData = await response.json();
  submitResults.innerHTML = jsonData;
  // Reset Input field
  patient.value = "";
  // Remove outdated patientlist and get new updated patientlist
  document.getElementById("patients").remove(); 
  getPatientlist(); 
});

// Code for creating the graph for the statistics
let canvas = document.createElement("CANVAS");
  canvas.id = 'myChart';
  canvas.width = '100';
  canvas.height = '100';
  canvasElement.append(canvas);
  
  DataObj = {Xdata: "", Ydata: {Beds: [2,2,2,2,2], Admitted: [0,0,0,0,0], eqp: [3,3,3,3,3]}}
  let Xvalues = ['Region Nordjylland', 'Region Midtjylland', 'Region Syddanmark', 'Region Sjælland', 'Region Hovedstad']
  DataObj.Xdata = Xvalues;
  var ctx = document.getElementById('myChart').getContext('2d');
    var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: DataObj.Xdata,
        datasets: [{
            label: '# beds available in each region',
            data: DataObj.Ydata.Beds,
            backgroundColor: [ 'rgba(255, 99, 132, 0.5)' ],
//            borderColor: [ 'rgba(255, 99, 132, 1)'],
            borderWidth: 1
        },
        {
            label: '# admitted in each region',
            data: DataObj.Ydata.Admitted,
            backgroundColor: [ 'rgba(127, 255, 212, 0.5)' ],
//            borderColor: [ 'rgba(255, 99, 132, 1)'],
            borderWidth: 1
        },
        {
            label: '# of equipment left in each region',
            data: DataObj.Ydata.eqp,
            backgroundColor: [ 'rgba(100,149,237 0.5)' ],
//            borderColor: [ 'rgba(255, 99, 132, 1)'],
            borderWidth: 1
        }]
    },
});

// Function that controls what is visible when user navigates to statistics subpage
function Status_Regions() {
  document.getElementById("h1").innerHTML = "Status";
  document.getElementById("sub_text").innerHTML = "Statistics about current hospital capacity can be seen here";
  pInput.style.display = "none";
  solve.style.display = "none";
  statistics.style.display = "block";
  canvasElement.style.display = "block";
  submitResults.innerHTML = "";
  unadmit.style.display = "none";
  otherPatients.style.display = "none";
  // Function that gets updated statistics from the server
  updateStats();
}

// Function for getting the statistics about hospital capacity from the server. 
async function updateStats() {
  const options = {
      method: 'POST',
      headers: {"content-type": "application/json"},
      body: JSON.stringify()
  };
  const response = await fetch("/stats", options);
  const jsonData = await response.json();
  statistics.innerHTML = '<table><tr><th>Region</th><th>Beds</th><th>Admitted</th><th>Equipment</th></tr><tr><th>1</th><th>' + jsonData.region1.Beds + '</th><th>' + jsonData.region1.Admitted + '</th><th>' + jsonData.region1.Equipment + '</th></tr><tr><th>2</th><th>' + jsonData.region2.Beds + '</th><th>' + jsonData.region2.Admitted + '</th><th>' + jsonData.region2.Equipment + '</th></tr><tr><th>3</th><th>' + jsonData.region3.Beds + '</th><th>' + jsonData.region3.Admitted + '</th><th>' + jsonData.region3.Equipment + '</th></tr><tr><th>4</th><th>' + jsonData.region4.Beds + '</th><th>' + jsonData.region4.Admitted + '</th><th>' + jsonData.region4.Equipment + '</th></tr><tr><th>5</th><th>' + jsonData.region5.Beds + '</th><th>' + jsonData.region5.Admitted + '</th><th>' + jsonData.region5.Equipment + '</th></tr></table>';
  let YBeds = [jsonData.region1.Beds, jsonData.region2.Beds, jsonData.region3.Beds, jsonData.region4.Beds, jsonData.region5.Beds]; 
  let YAdmitted = [jsonData.region1.Admitted, jsonData.region2.Admitted, jsonData.region3.Admitted, jsonData.region4.Admitted, jsonData.region5.Admitted];
  let Yeqp = [jsonData.region1.Equipment, jsonData.region2.Equipment, jsonData.region3.Equipment, jsonData.region4.Equipment, jsonData.region5.Equipment];
//  DataObj = {Xvalues, Yvalues}
  DataObj.Ydata.Beds = YBeds;
  DataObj.Ydata.Admitted = YAdmitted;
  DataObj.Ydata.eqp = Yeqp;
//  console.log(DataObj.Ydata)
addData(myChart, DataObj.Ydata)
}
function addData(myChart, Ydata) {
  for(index in Ydata.Beds){
    myChart.data.datasets[0].data[index] = Ydata.Beds[index];
    myChart.data.datasets[1].data[index] = Ydata.Admitted[index];
    myChart.data.datasets[2].data[index] = Ydata.eqp[index];
  }
  myChart.update(0);
}
function removeData(myChart, Ydata) {
    myChart.data.datasets[0].data = [];
  myChart.update(0);
}

// Function that controls what is visible when user navigates to instructions subpage
function Instructions() {
  document.getElementById("h1").innerHTML = "Instructions";
  document.getElementById("sub_text").innerHTML = "<h1>How to use site</h1> Head to the admit patients section in order to admit a patient. The section also lets you choose which solver gets used for determining where a patient gets submitted. For unadmitting a patient, head to the unadmit patients section and start searching for the patient that is to be unsubmitted. For simply checking how much hospital capacity is left, head to the status of regions section. ";
  pInput.style.display = "none";
  solve.style.display = "none";
  statistics.style.display = "none";
  canvasElement.style.display = "none"; 
  otherPatients.style.display = "none";
  submitResults.innerHTML = "";
  unadmit.style.display = "none";
}

// Function that controls what is visible when user navigates to contact subpage
function Contact() {
  document.getElementById("h1").innerHTML = "Contact";
  document.getElementById("sub_text").innerHTML = "A link to our <a href='https://github.com/Ravnholt7507/P2-Projekt/'>github</a>.";
  pInput.style.display = "none";
  solve.style.display = "none";
  statistics.style.display = "none";
  canvasElement.style.display = "none"; 
  otherPatients.style.display = "none";
  submitResults.innerHTML = "";
  unadmit.style.display = "none";
}

// Function that gets data from server about which solver is currently is use.
async function solverChecker() {
// Send request to server without the intent to change the solver
  const data = {change: "false"};
  const options = {
      method: 'POST',
      headers: {"content-type": "application/json"},
      body: JSON.stringify(data)
  };
  const response = await fetch("/solver", options);
  const jsonData = await response.json();
  console.log(jsonData);
  // Show which solver is being used on the page
  document.getElementById("solver").innerHTML = "Currently in use: Solver " + jsonData.solver;
}

// Function that sends request to server for changing which solver that is being used.
async function solverChange() {
// Send request to server with the intent of changing the solver in use
  const solver = {change: "change"};
  const options = {
      method: 'POST',
      headers: {"content-type": "application/json"},
      body: JSON.stringify(solver)
  };
  const response = await fetch("/solver", options);
  const jsonData = await response.json();
  // Change which solver is being used on the page
  document.getElementById("solver").innerHTML = "Currently in use: Solver " + jsonData.solver;
}

// Function that sends data to the server for submitting a patient. Includes client side validation of data types. 
pInput.addEventListener("submit", async (e) => {
  e.preventDefault();
  // Get Patient data for validation
  let Name = document.getElementById("pname");
  let Grading = document.getElementById("grading");
  let City = document.getElementById("city");
  // Validation of Name input - name cannot be number
  if (!isNaN(Name.value)) {
    alert("Please enter the patient's name");
    return;
  }
  // Validation of grading input - must be either 0, 1, 2 or 3.
  if (Grading.value != 0 && Grading.value != 1 && Grading.value != 2 && Grading.value != 3) {
    alert("Please select an illness grade");
    return;
  }
  // Validatation of city input - The city must be selected from the datalist
  // If all inputs are of correct type, data will be submitted and the form is cleared
  let cities = document.getElementById("cities");
  // Search through the datalist to check if the inputted city exists.
  for (index in cities.options) {
    if (City.value === cities.options[index].value) {
      console.log("Name: "+ Name.value +", Grading: " + Grading.value + ", City: " + City.value);
      let iname = Name.value; let igrade = Grading.value; let icity = City.value;
      // If all user input pass validation, send data to server for admission. 
      const patientObj = {iname, igrade, icity};
      const options = {
        method: 'POST',
        headers: {"content-type": "application/json"},
        body: JSON.stringify(patientObj)
      };
      // Print appropiate respons from server
      const response = await fetch("/api", options);
      let RPs = await response.json();
      console.log(RPs);
      if (RPs == "no Space"){ 
      alert('No more space available');
      Name.value = "";
      Grading.value = "-";
      City.value = "";
      return;
      }
      if (RPs == "no Eqp"){
      alert('No more equipment in region')
      Name.value = "";
      Grading.value = "-";
      City.value = "";
      return;
      }
      else {
      let NewPatient = GetIndex(iname, RPs);
      let patientData = "";
      // If there is enough space and equipment, print which region patient should be admitted to. 
      for (index in RPs){
        if (index != NewPatient)
          patientData += "Patient " + RPs[index].Name + " with ID " + RPs[index].PID + " is to be moved to region " + SelectRegion(RPs[index].region) + " ";
      }
      submitResults.innerHTML = "<b>Result: </b>Patient " + RPs[NewPatient].Name + " is to be submitted to region " + SelectRegion(RPs[NewPatient].region) + " With ID " + RPs[NewPatient].PID;
      // If a lower grade patients needs to be moved, this will be shown on site as well. 
      if (patientData != undefined)
        otherPatients.innerHTML = patientData;
      } 
      Name.value = "";
      Grading.value = "-";
      City.value = "";
      return;
    }
  }
  alert("Please select a valid city");  
});

function GetIndex(name, array){
  for (index in array){
    if (name == array[index].Name)
    return index;
  }
}

// Function for converting the regions to their respective names
function SelectRegion(RegionNumber){
  let RegionName = "";
  switch(RegionNumber) {
    case 0: RegionName = 'Nordjylland'; break;
    case 1: RegionName = 'MidtJylland'; break;
    case 2: RegionName = 'Syddanmark'; break;
    case 3: RegionName = 'Sjælland'; break;
    case 4: RegionName = 'Hovedstaden'; break;
  default: RegionName = 'Kunne ikke finde region';
  }
  return RegionName;
}

</script>

</body>
</html>

<!DOCTYPE html>
<html lang="en">
<title>Pandemic program</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.2.1/dist/chart.min.js"> </script>
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://www.w3schools.com/lib/w3-theme-black.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
html,body,h1,h2,h3,h4,h5,h6 {font-family: "Roboto", sans-serif;}
.w3-sidebar {
  z-index: 3;
  width: 250px;
  top: 0px;
  bottom: 0;
  height: inherit;
}
</style>
<body>

<!-- Sidebar -->
<nav class="w3-sidebar w3-bar-block w3-collapse w3-large w3-theme-l5 w3-animate-left" id="mySidebar">
  <a href="javascript:void(0)" onclick="w3_close()" class="w3-right w3-xlarge w3-padding-large w3-hover-black w3-hide-large" title="Close Menu">
    <i class="fa fa-remove"></i>
  </a>
  <h4 class="w3-bar-item"><b onclick="frontpage()">Menu</b></h4>
  <a class="w3-bar-item w3-button w3-hover-black" href="#" onclick="Admit_Patient()">Admit Patients</a>
  <a class="w3-bar-item w3-button w3-hover-black" href="#" onclick="Unadmit_Patient()">Unadmit Patients</a>
  <a class="w3-bar-item w3-button w3-hover-black" href="#" onclick="Status_Regions()">Status of Regions</a>
  <a class="w3-bar-item w3-button w3-hover-black" href="#" onclick="Instructions()">Instructions</a>
  <a class="w3-bar-item w3-button w3-hover-black" href="#" onclick="Contact()">Contact</a>
</nav>

<!-- Overlay effect when opening sidebar on small screens -->
<div class="w3-overlay w3-hide-large" onclick="w3_close()" style="cursor:pointer" title="close side menu" id="myOverlay"></div>

<!-- Main content: shift it to the right by 250 pixels when the sidebar is visible -->
<div class="w3-main" style="margin-left:250px">

  <div class="w3-row w3-padding-64">
    <div class="w3-twothird w3-container" id="frontpage">
        <h1 class="w3-text-teal" id="h1">Hospital Management</h1>
        <p id = "sub_text"> Manage Patients.</p>
        <form class="Patientinput" action="/" id="pInput" type="hidden" method="POST">
          <label for="fname">Patient name:</label><br>
          <input type="text" id="pname" name="name" value="" required><br>
          <label for="Grading">Grading:</label><br>
          <select id="grading" name="grading">
            <option value="-">-</option>
            <option value=0>0</option>
            <option value=1>1</option>
            <option value=2>2</option>
            <option value=3>3</option>
          </select><br>
          <label for="City">City:</label><br>
          <input type="text" list="cities" id="city" name="City" required>
          <datalist id="cities">
            <option value="Brønderslev">
            <option value="Frederikshavn">
            <option value="Hjørring">
            <option value="Jammerbugt">
            <option value="Læsø">
            <option value="Mariagerfjord">
            <option value="Morsø">
            <option value="Rebild">
            <option value="Thisted">
            <option value="Vesthimmerland">
            <option value="Aalborg">
            <option value="Favrskov">
            <option value="Hedensted">
            <option value="Herning">
            <option value="Holstebro">
            <option value="Horsens">
            <option value="Ikast">
            <option value="Lemvig">
            <option value="Norddjurs">
            <option value="Odder">
            <option value="Randers">
            <option value="Ringkøbing-Skjern">
            <option value="Samsø">
            <option value="Silkeborg">
            <option value="Skanderborg">
            <option value="Skive">
            <option value="Struer">
            <option value="Syddjurs">
            <option value="Viborg">
            <option value="Aarhus">
            <option value="Assens">
            <option value="Billund">
            <option value="Esbjerg">
            <option value="Fanø">
            <option value="Fredericia">
            <option value="Faaborg-Midtfyn">
            <option value="Haderslev">
            <option value="Kerteminde">
            <option value="Kolding">
            <option value="Langeland">
            <option value="Middelfart">
            <option value="Nordfyns">
            <option value="Nyborg">
            <option value="Odense">
            <option value="Svendborg">
            <option value="Sønderborg">
            <option value="Tønder">
            <option value="Varde">
            <option value="Vejen">
            <option value="Vejle">
            <option value="Ærø">
            <option value="Aabenraa">
            <option value="Faxe">
            <option value="Greve">
            <option value="Guldborgsund">
            <option value="Holbæk">
            <option value="Kalundborg">
            <option value="Køge">
            <option value="Lejre">
            <option value="Lolland">
            <option value="Næstved">
            <option value="Odsherred">
            <option value="Ringsted">
            <option value="Roskilde">
            <option value="Slagelse">
            <option value="Solrød">
            <option value="Sorø">
            <option value="Stevns">
            <option value="Vordingborg">
            <option value="Albertslund">
            <option value="Allerød">
            <option value="Ballerup">
            <option value="Bornholm">
            <option value="Brøndby">
            <option value="København">
            <option value="Dragør">
            <option value="Egedal">
            <option value="Fredensborg">
            <option value="Frederiksberg">
            <option value="Frederikssund">
            <option value="Furesø">
            <option value="Gentofte">
            <option value="Gladsaxe">
            <option value="Glostrup">
            <option value="Gribskov">
            <option value="Halsnæs">
            <option value="Helsingør">
            <option value="Herlev">
            <option value="Hillerød">
            <option value="Hvidovre">
            <option value="Høje-Taastrup">
            <option value="Hørsholm">
            <option value="Ishøj">
            <option value="Lyngby-Taarbæk">
            <option value="Rudersdal">
            <option value="Rødovre">
            <option value="Tårnby">
            <option value="Vallensbæk">
          </datalist><br><br>
          <input type="submit" value="Admit">
        </form>
        <br>
        <div id="unadmit">
          <form>
            <label for="search">Search</label>
            <input type="text" id="Search" list="patients">
            <button type="submit">Unadmit</button>
          </form>
        </div><br>
        <div id="submitResult">
          
        </div>
        <br>
        <div id="otherPatients">

        </div>
        <br>
        <div id="solve">
          <p>Select which type of solver the system is using. Using solver 2 means patients can be moved more than once per week. If solver 1 is used, patients can only be moved between hospitals once a week.</p>
          <p><b id="solver">Currently in use: Solver <%= solver %></b></p> <a href="#" onclick="solverChange()">Change</a>
        </div>
        <div id="statistics">
          <table>
            <tr>
              <th>Region</th>
              <th>Beds</th>
              <th>Staff</th>
              <th>Equipment</th>
            </tr>
            <tr>
              <th>1</th>
              <th><%= Beds %></th>
              <th><%= Staff %></th>
              <th><%= Equipment %></th>
            </tr>
            <tr>
              <th>2</th>
              <th><%= Beds %></th>
              <th><%= Staff %></th>
              <th><%= Equipment %></th>
            </tr>
          </table>
        </div>
        <br>
        <div id="canvasElement">
        </div>


    </div>
    <div class="w3-third w3-container">
      <p class="w3-border w3-padding-large w3-padding-32 w3-center">No ads to look at here.</p>
      <p class="w3-border w3-padding-large w3-padding-64 w3-center">No ads to look at here.</p>
    </div>
  </div>

</div>

<script>
// Get the Sidebar
var mySidebar = document.getElementById("mySidebar");
// Get the DIV with overlay effect
var overlayBg = document.getElementById("myOverlay");
// Toggle between showing and hiding the sidebar, and add overlay effect
function w3_open() {
  if (mySidebar.style.display === 'block') {
    mySidebar.style.display = 'none';
    overlayBg.style.display = "none";
  } else {
    mySidebar.style.display = 'block';
    overlayBg.style.display = "block";
  }
}
// Close the sidebar with the close button
function w3_close() {
  mySidebar.style.display = "none";
  overlayBg.style.display = "none";
}
let pInput = document.getElementById("pInput");
pInput.style.display = "none";
let solve = document.getElementById("solve");
solve.style.display = "none";
let statistics = document.getElementById("statistics");
statistics.style.display = "none";
let submitResults = document.getElementById("submitResult");
let otherPatients = document.getElementById("otherPatients");
let unadmit = document.getElementById("unadmit");
unadmit.style.display = "none";
let canvasElement = document.getElementById("canvasElement");
canvasElement.style.display = "none";
otherPatients.style.display = "none"

function frontpage() {
  document.getElementById("h1").innerHTML = "Hospital Management";
  document.getElementById("sub_text").innerHTML = "Manage Patients."; 
  //document.getElementById("sub_text").children = 0; //'<p id = "sub_text"> Manage Patients.</p>'
  //document.getElementById("frontpage") = '<div class="w3-twothird w3-container"><h1 class="w3-text-teal" id="h1">Hospital Management</h1><p id = "sub_text"> Manage Patients.</p></div>';
  //delete document.getElementById("Patientinput");
  pInput.style.display = "none";
  solve.style.display = "none";
  statistics.style.display = "none";
  canvasElement.style.display = "none"; 
  submitResults.innerHTML = "";
  unadmit.style.display = "none";
  otherPatients.style.display = "none"
}

function Admit_Patient() {
  document.getElementById("h1").innerHTML = "Admit Patients";
  document.getElementById("sub_text").innerHTML = "Here you can admit patients. Please fill out the input fields below to admit a patient:";
  //let fields =  '<form class="Patientinput" action="/"><label for="fname">Patient name:</label><br><input type="text" id="pname" name="name"><br><label for="Grading">Grading:</label><br><input type="text" id="grading" name="Grading"><br><label for="City">City:</label><br><input type="text" id="city" name="City"><br><br><input type="submit" value="Submit"></form> ';
  //document.getElementById("sub_text").outerHTML += fields;
  //pInput.type = "text";
  pInput.style.display = "block";
  solve.style.display = "block";
  canvasElement.style.display = "none"; 
  statistics.style.display = "none";
  otherPatients.style.display = "block";
  submitResults.innerHTML = "";
  unadmit.style.display = "none";
}

function Unadmit_Patient() {
  document.getElementById("h1").innerHTML = "Unadmit Patients";
  document.getElementById("sub_text").innerHTML = "Here patients can be unadmitted. Type in a name to search for a patient: ";
  pInput.style.display = "none";
  solve.style.display = "none";
  statistics.style.display = "none";
  canvasElement.style.display = "none"; 
  otherPatients.style.display = "none"
  submitResults.innerHTML = "";
  unadmit.style.display = "block";
  try {
    document.getElementById('patients').remove();
  } catch {
    console.log("Its fine");
  }
  getPatientlist();
}

async function getPatientlist() {
  const options = {
      method: 'POST',
      headers: {"content-type": "application/json"},
      body: JSON.stringify()
  };

  const response = await fetch("/patients", options);
  const jsonData = await response.json();
  console.log(jsonData); //test
  console.log(jsonData.length); //test
  patientslist = document.createElement('datalist');
  patientslist.id = 'patients';
  for (index in jsonData) {
    var option = document.createElement('option');
    option.value = jsonData[index].Name + ' grade: ' + jsonData[index].grading + ' region: ' + jsonData[index].region;
    option.id = index;
    patientslist.appendChild(option);
  }
  unadmit.appendChild(patientslist);
}

unadmit.addEventListener("submit", async (e) => {
  e.preventDefault();
  let patient = document.getElementById("Search");
  let yetAnotherDummyVar = document.querySelector('option[value="' + patient.value + '"]');
  if (yetAnotherDummyVar == null) {
    alert("Please select a patient from the list");
    return;
  }
  let anotherDummyVar = {index: yetAnotherDummyVar.id}
  const options = {
      method: 'POST',
      headers: {"content-type": "application/json"},
      body: JSON.stringify(anotherDummyVar)
  };

  const response = await fetch("/unadmit", options);
  const jsonData = await response.json();
  submitResults.innerHTML = jsonData;
  patient.value = "";
  // get new updated patient list
  document.getElementById("patients").remove(); 
  getPatientlist(); 
});

let canvas = document.createElement("CANVAS");
  canvas.id = 'myChart';
  canvas.width = '100';
  canvas.height = '100';
  canvasElement.append(canvas)
  
  DataObj = {Xdata: "", Ydata: [2,0,2,0,2,0,2,0,2,0]}

  let Xvalues = ['Region 1 beds', 'Region 1 Admitted', 'Region 2 beds', 'Region 2 Admitted', 'Region 3 beds', 
  'region 3 Admitted', 'Region 4 beds', 'region 4 Admitted', 'Region 5 beds', 'region 5 Admitted'];
  DataObj.Xdata = Xvalues;

  var ctx = document.getElementById('myChart').getContext('2d');
    var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: DataObj.Xdata,
        datasets: [{
            label: '# beds available in region',
            data: DataObj.Ydata,
            backgroundColor: [ 'rgba(255, 99, 132, 0.2)' ],
            borderColor: [ 'rgba(255, 99, 132, 1)'],
            borderWidth: 1
        }]
    },
});

function Status_Regions() {
  document.getElementById("h1").innerHTML = "Status";
  document.getElementById("sub_text").innerHTML = "Functionality will follow";
  pInput.style.display = "none";
  solve.style.display = "none";
  statistics.style.display = "block";
  canvasElement.style.display = "block";
  submitResults.innerHTML = "";
  unadmit.style.display = "none";
  otherPatients.style.display = "none"
  updateStats();
}
async function updateStats() {
  const options = {
      method: 'POST',
      headers: {"content-type": "application/json"},
      body: JSON.stringify()
  };
  const response = await fetch("/stats", options);
  const jsonData = await response.json();
//  console.log(jsonData);
  statistics.innerHTML = '<table><tr><th>Region</th><th>Beds</th><th>Admitted</th><th>Staff</th><th>Equipment</th></tr><tr><th>1</th><th>' + jsonData.region1.Beds + '</th><th>' + jsonData.region1.Admitted + '</th><th>' + jsonData.region1.Staff + '</th><th>' + jsonData.region1.Equipment + '</th></tr><tr><th>2</th><th>' + jsonData.region2.Beds + '</th><th>' + jsonData.region2.Admitted + '</th><th>' + jsonData.region2.Staff + '</th><th>' + jsonData.region2.Equipment + '</th></tr><tr><th>3</th><th>' + jsonData.region3.Beds + '</th><th>' + jsonData.region3.Admitted + '</th><th>' + jsonData.region3.Staff + '</th><th>' + jsonData.region3.Equipment + '</th></tr><tr><th>4</th><th>' + jsonData.region4.Beds + '</th><th>' + jsonData.region4.Admitted + '</th><th>' + jsonData.region4.Staff + '</th><th>' + jsonData.region4.Equipment + '</th></tr><tr><th>5</th><th>' + jsonData.region5.Beds + '</th><th>' + jsonData.region5.Admitted + '</th><th>' + jsonData.region5.Staff + '</th><th>' + jsonData.region5.Equipment + '</th></tr></table>';
  let Yvalues = [jsonData.region1.Beds, jsonData.region1.Admitted, jsonData.region2.Beds, jsonData.region2.Admitted, jsonData.region3.Beds,
  jsonData.region3.Admitted, jsonData.region4.Beds, jsonData.region4.Admitted, jsonData.region5.Beds, jsonData.region5.Admitted] 
//  DataObj = {Xvalues, Yvalues}
  DataObj.Ydata = Yvalues;
//  console.log(DataObj.Ydata)
addData(myChart, DataObj.Ydata)
}

function addData(myChart, Ydata) {
    myChart.data.datasets[0].data[0] = Ydata[0]
    myChart.data.datasets[0].data[1] = Ydata[1]
    myChart.data.datasets[0].data[2] = Ydata[2]
    myChart.data.datasets[0].data[3] = Ydata[3]
    myChart.data.datasets[0].data[4] = Ydata[4]
    myChart.data.datasets[0].data[5] = Ydata[5]
    myChart.data.datasets[0].data[6] = Ydata[6]
    myChart.data.datasets[0].data[7] = Ydata[7]
    myChart.data.datasets[0].data[8] = Ydata[8]
    myChart.data.datasets[0].data[9] = Ydata[9]
  myChart.update(0);
}

function removeData(myChart, Ydata) {
    myChart.data.datasets[0].data = [];
  myChart.update(0);
}

function Instructions() {
  document.getElementById("h1").innerHTML = "Instructions";
  document.getElementById("sub_text").innerHTML = "Instructions will follow.";
  pInput.style.display = "none";
  solve.style.display = "none";
  statistics.style.display = "none";
  canvasElement.style.display = "none"; 
  otherPatients.style.display = "none"
  submitResults.innerHTML = "";
  unadmit.style.display = "none";
}

function Contact() {
  document.getElementById("h1").innerHTML = "Contact";
  document.getElementById("sub_text").innerHTML = "A link to our <a href='https://github.com/Ravnholt7507/P2-Projekt/'>github</a>.";
  pInput.style.display = "none";
  solve.style.display = "none";
  statistics.style.display = "none";
  canvasElement.style.display = "none"; 
  otherPatients.style.display = "none"
  submitResults.innerHTML = "";
  unadmit.style.display = "none";
}

async function solverChange() {
  const solver = {change: "change"};
  const options = {
      method: 'POST',
      headers: {"content-type": "application/json"},
      body: JSON.stringify(solver)
  };
  const response = await fetch("/solver", options);
  const jsonData = await response.json();
  document.getElementById("solver").innerHTML = "Currently in use: Solver " + jsonData.solver;
}

pInput.addEventListener("submit", async (e) => {
  e.preventDefault();
  // Get Patient data for validation
  let Name = document.getElementById("pname");
  let Grading = document.getElementById("grading");
  let City = document.getElementById("city");
  // Validation of Name input - name cannot be number
  if (!isNaN(Name.value)) {
    alert("Please enter the patient's name");
    return;
  }
  // Validation of grading input
  if (Grading.value != 0 && Grading.value != 1 && Grading.value != 2 && Grading.value != 3) {
    alert("Please select an illness grade");
    return;
  }
  // Validatation of city input
  // If all inputs are of correct type, data will be submitted and the form is cleared
  let cities = document.getElementById("cities");
  for (index in cities.options) {
    if (City.value === cities.options[index].value) {
      console.log("Name: "+ Name.value +", Grading: " + Grading.value + ", City: " + City.value);
      let iname = Name.value; let igrade = Grading.value; let icity = City.value;
      const patientObj = {iname, igrade, icity};
      const options = {
        method: 'POST',
        headers: {"content-type": "application/json"},
        body: JSON.stringify(patientObj)
      };
      const response = await fetch("/api", options);
      let RPs = await response.json();
      let NewPatient = GetIndex(iname, RPs)
      let patientData = "";
      for (index in RPs){
        if (index != NewPatient)
          patientData += "Patient " + RPs[index].Name + " is to be moved to region " + RPs[index].region + " ";
      }
      submitResults.innerHTML = "<b>Result: </b>Patient " + RPs[NewPatient].Name + " is to be submitted to Region " + RPs[NewPatient].region + " With ID " + RPs[NewPatient].PID;
      if (patientData != undefined)
        otherPatients.innerHTML = patientData;
 //     console.log(RPs);
      Name.value = "";
      Grading.value = "-";
      City.value = "";
      return;
    }
  }
  alert("Please select a valid city");

  function GetIndex(name, array){
    for (index in array){
      if (name == array[index].Name)
      return index
    }
  }
  
});
</script>

</body>
</html>
